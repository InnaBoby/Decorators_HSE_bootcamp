# -*- coding: utf-8 -*-
"""homework_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-UyCnEGDaDE03y4YL50oDCVoP3KU7TUs

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re

from random import randint

import functools

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f'{func.__name__} потребовалось {end - start:.4f} секунд')
        return result

    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        arg_str = ', '.join(repr(arg) for arg in args)
        kw = {}
        for k, w in kwargs:
          kw[k] = w
        print(f'{func.__name__} была вызвана с параметрами {arg_str}, {kw}')
        return res
    return wrapper

"""## Задание 3"""

global_counter = 0
def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        res= func(*args, **kwargs)
        global global_counter
        global_counter+=1
        print(f'{func.__name__} была вызвана {global_counter} раз')
        return res

    return wrapper

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}
  @functools.lru_cache()
 def fmemo(*args):
      cached_res = cache.get(args, None)
      if cached_res:
          return cached_res
      
      res = func(*args)
      cache[args] = res
      return res

  fmemo.cache = cache
  return fmemo

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('whole'))

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

print(fib(5))

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@benchmark
@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

print(fib(5))
